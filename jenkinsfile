pipeline {
    agent any
    stages {
        /* "Build" and "Test" stages omitted */

        stage('Build & Deploy - Staging') {
            steps {
                        script {
                            sshPublisher(
                                continueOnError: false, failOnError: true,
                                publishers: [
                                    sshPublisherDesc(
                                        configName: "testvm",
                                        verbose: true,
                                        transfers: [
                                            sshTransfer(
                                                remoteDirectory: "",
                                                //execCommand: "cd /var/www/nv_app/natures-vault-user && ls -l"
                                                execCommand: "cd /var/ && ls -l"
                                                //execCommand: "cd /var/www/nv_app/natures-vault-user && git pull && npm i && npm run build && sudo rm -rf /var/www/nv_app/tokensale_app/* && cp -r /var/www/nv_app/natures-vault-user/dist/* /var/www/nv_app/tokensale_app/ && cp /var/www/nv_app/natures-vault-user/.htaccess /var/www/nv_app/tokensale_app/"

                                            )
                                        ])
                                ])
                        }
                    
                }
        }

        stage('Sanity check') {
            steps {
                input "Does the staging environment look ok?"
            }
        }

        stage('Build & Deploy - Production') {
            steps {
                script {
                    sshPublisher(
                        continueOnError: false, failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: "testvm",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        remoteDirectory: "",
                                        //execCommand: "cd /var/www/nv_app/natures-vault-user && ls -l"
                                        execCommand: "cd /var/ && ls -l"
                                        //execCommand: "cd /var/www/nv_app/natures-vault-user && git pull && npm i && npm run build && sudo rm -rf /var/www/nv_app/tokensale_app/* && cp -r /var/www/nv_app/natures-vault-user/dist/* /var/www/nv_app/tokensale_app/ && cp /var/www/nv_app/natures-vault-user/.htaccess /var/www/nv_app/tokensale_app/"

                                    )
                                ])
                        ])
                }
            
        }
        }
    }

    post {
                always {
                    emailext attachLog: true, attachmentsPattern: 'generatedFile.txt',
                        body: "sha: ${env.GIT_COMMIT} ${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL} \n\n\n Thanks,\nDevOps Team",
                        to: "vimal.pr@accubits.com",
                        subject: "${env.JOB_NAME} Build ${currentBuild.currentResult}"
    
                }
                success {
                    echo 'success'
                }
                failure {
                    echo 'failure'
                }
                unstable {
                    echo 'unstable'
                }
                changed {
                    echo 'changed'
                }
            }
}
